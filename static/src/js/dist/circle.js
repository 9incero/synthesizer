/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/circle.js":
/*!**************************!*\
  !*** ./src/js/circle.js ***!
  \**************************/
/***/ (() => {

eval("// import * as THREE from 'three';\r\n// import { cloud, cloudfunc } from './vantavisual'\r\n// import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\r\n// import { dataArray, analyser, pitchDetector, myNote, octave, randomEnergy, colorByPitchMulti } from './audio.js'\r\n// import { bgColor, objColor1, objColor2, setBgColor, setObjColor1 } from './colorpicker'\r\n// import { SyntheysizerEvents, note_set, pad_set, dial_set} from './Share.js';\r\n\r\n// let controls;\r\n// let camera, scene, renderer;\r\n// let geometry, material, energy = 0;\r\n// let geometry2, material2;\r\n// let geometry3, material3;\r\n\r\n// let compoCenter;\r\n// let compoCenter2;\r\n// let compoCenter3;\r\n\r\n// let particleMaterial;\r\n// let particleMaterial2;\r\n// let particleMaterial3;\r\n\r\n// let sizeValue;\r\n// let opacityValue;\r\n\r\n// let container;\r\n// let FrameRate = 0;\r\n// let pitch, pitchColor\r\n// let pitch1, pitch2, pitch3\r\n// let pitchOne, pitchTwo, pitchThree\r\n// let gradientColor;\r\n// let color1, color2, color3\r\n\r\n// let dial_one, dial_two, dial_three, dial_four, dial_five, dial_six, dial_seven, dial_eight;\r\n// let beat, backgroundColor;\r\n\r\n// let group;\r\n// let ambientLight, spotLight, pointLight;\r\n// var pitchInfo;\r\n\r\n// // color info\r\n\r\n// let red = 'hsl(0,99%,41%)'\r\n// let redorange = 'hsl(24,99%,41%)'\r\n// let orange = 'hsl(36,99%,41%)'\r\n// let orangeyellow = 'hsl(46,99%,41%)'\r\n// let yellow = 'hsl(55,99%,41%)'\r\n// let green = 'hsl(129,100%,31%)'\r\n// let greenblue = 'hsl(179,100%,27%)'\r\n// let blue = 'hsl(186,99%,41%)'\r\n// let blueviolet = '#2E93FF'\r\n// let violet = 'hsl(273,99%,40%)'\r\n// let violetpink = 'hsl(284,100%,34%)'\r\n// let pink = 'hsl(329,100%,39%)'\r\n// let magenta = 'hsl(346,100%,39%)'\r\n\r\n// let redhigh = 'hsl(0,100%,25%)'\r\n// let redorangehigh = 'hsl(25,100%,24%)'\r\n// let orangehigh = 'hsl(36,100%,24%)'\r\n// let orangeyellowhigh = 'hsl(48,100%,24%)'\r\n// let yellowhigh = 'hsl(57,100%,26%)'\r\n// let greenhigh = 'hsl(120,100%,19%)'\r\n// let greenbluehigh = 'hsl(178,100%,18%)'\r\n// let bluehigh = 'hsl(210,100%,22%)'\r\n// let blueviolethigh = 'hsl(246,100%,22%)'\r\n// let violethigh = 'hsl(275,100%,22%)'\r\n// let violetpinkhigh = 'hsl(308,100%,22%)'\r\n// let pinkhigh = 'hsl(323,100%,21%)'\r\n// let magentahigh = 'hsl(351,100%,21%)'\r\n\r\n// String.prototype.format = function() {\r\n//   var formatted = this, i = 0;\r\n//   while (/%s/.test(formatted))\r\n//     formatted = formatted.replace(\"%s\", arguments[i++]);\r\n//   return formatted;\r\n// }\r\n\r\n// // init function\r\n// function init() {\r\n//     scene = new THREE.Scene();\r\n//     // canvas\r\n//     renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true });\r\n//     renderer.setClearColor(0x000000, 0);\r\n//     renderer.setPixelRatio(window.devicePixelRatio);\r\n//     renderer.setSize(960, 580);\r\n\r\n//     camera = new THREE.PerspectiveCamera(70, renderer.domElement.width/renderer.domElement.height, 2, 2000);\r\n//     camera.position.set(0, 10, 30);\r\n\r\n//     container = document.getElementById('shape-canvas')\r\n//     container.appendChild( renderer.domElement )\r\n//     renderer.autoClear = true;\r\n//     renderer.toneMapping = THREE.ACESFilmicToneMapping;\r\n//     renderer.toneMappingExposure = 1.25;\r\n\r\n//     group = new THREE.Group();\r\n\r\n//     scene.add(group);\r\n\r\n//     controls = new OrbitControls( camera, container );\r\n//     controls.update();\r\n//     createCircle_Vanilla();\r\n\r\n//   };\r\n\r\n// // 베이스 도형\r\n\r\n// function createCircle_Vanilla(){\r\n\r\n//   geometry = new THREE.CircleGeometry( 10, 60 );\r\n//   material = new THREE.MeshBasicMaterial();\r\n//   compoCenter = new THREE.Mesh(geometry, material);\r\n//   compoCenter.position.set(1, 0, 0);\r\n\r\n//   geometry2 = new THREE.CircleGeometry( 10, 60 );\r\n//   material2 = new THREE.MeshBasicMaterial();\r\n//   compoCenter2 = new THREE.Mesh(geometry2, material2);\r\n//   compoCenter2.position.set(1, 0, 0);\r\n\r\n//   geometry3 = new THREE.CircleGeometry( 10, 60 );\r\n//   material3 = new THREE.MeshBasicMaterial();\r\n//   compoCenter3 = new THREE.Mesh(geometry3, material3);\r\n//   compoCenter3.position.set(1, 0, 0);\r\n\r\n//   group.add( compoCenter );\r\n//   group.add( compoCenter2 );\r\n//   group.add( compoCenter3 );\r\n\r\n// }\r\n\r\n// function returnPitchOne(polyPitchArray){\r\n//   pitch1 = polyPitchArray[0];\r\n//   return pitch1\r\n// }\r\n\r\n// function returnPitchTwo(polyPitchArray){\r\n//   pitch2 = polyPitchArray[1];\r\n//   return pitch2\r\n// }\r\n\r\n// function returnPitchThree(polyPitchArray){\r\n//   pitch3 = polyPitchArray[2];\r\n//   return pitch3\r\n// }\r\n\r\n// function colorByPitch(pitchNum){\r\n\r\n//   let pitchColor;\r\n\r\n//   if (pitchNum == '48'){ // 도\r\n//       pitchColor = red\r\n//   } else if (pitchNum == '49'){ // 도샾++\r\n//       pitchColor = redorange\r\n//   } else if (pitchNum == '50'){ // 레++\r\n//       pitchColor = orange\r\n//   } else if (pitchNum == '51'){ // 레샾\r\n//       pitchColor = orangeyellow\r\n//   } else if (pitchNum == '52'){ // 미++\r\n//       pitchColor = yellow\r\n//   } else if (pitchNum == '53'){ // 파\r\n//       pitchColor = green\r\n//   } else if (pitchNum == '54'){ // 파샾\r\n//       pitchColor = greenblue\r\n//   } else if (pitchNum == '55'){ // 솔\r\n//      pitchColor = blue\r\n//   } else if (pitchNum == '56'){ // 솔샾\r\n//     pitchColor = blueviolet\r\n//   } else if (pitchNum == '57'){ // 라\r\n//     pitchColor = violet\r\n//   } else if (pitchNum == '58'){ // 라샾\r\n//     pitchColor = violetpink\r\n//   } else if (pitchNum == '59'){ // 시\r\n//     pitchColor = pink\r\n//   } else if (pitchNum == '60'){\r\n//     pitchColor = magenta\r\n//   } else if (pitchNum == '61'){\r\n//     pitchColor = redhigh\r\n//   } else if (pitchNum == '62'){\r\n//     pitchColor = redorangehigh\r\n//   } else if (pitchNum == '63'){\r\n//     pitchColor = orangehigh\r\n//   } else if (pitchNum == '64'){\r\n//     pitchColor = orangeyellowhigh\r\n//   } else if (pitchNum == '65'){\r\n//     pitchColor = yellowhigh\r\n//   } else if (pitchNum ==' 66'){\r\n//     pitchColor = greenhigh\r\n//   } else if (pitchNum == '67'){\r\n//     pitchColor = greenbluehigh\r\n//   } else if (pitchNum ==' 68'){\r\n//     pitchColor = bluehigh\r\n//   } else if (pitchNum == '69'){\r\n//     pitchColor = blueviolethigh\r\n//   } else if (pitchNum == '70'){\r\n//     pitchColor = violethigh\r\n//   } else if (pitchNum == '71'){\r\n//     pitchColor = violetpinkhigh\r\n//   } else if (pitchNum == '72'){\r\n//     pitchColor = pinkhigh\r\n//   } else if (pitchNum == '73'){\r\n//     pitchColor = magentahigh\r\n//   }\r\n//     return pitchColor;\r\n//   }\r\n\r\n// // 3D 도형\r\n\r\n// function createShape(){\r\n//   if (polyPitchArray.length != 0){\r\n//     pitchOne = returnPitchOne(polyPitchArray)\r\n//     pitchTwo = returnPitchTwo(polyPitchArray)\r\n//     pitchThree = returnPitchThree(polyPitchArray)\r\n\r\n//     color1 = colorByPitch(pitchOne);\r\n//     color2 = colorByPitch(pitchTwo);\r\n//     color3 = colorByPitch(pitchThree);\r\n//   } else {\r\n//     color1 = '#FFFFFF'\r\n//     color2 = '#FFFFFF'\r\n//     color3 = '#FFFFFF'\r\n//   }\r\n//   //console.log('이거', dial_one, dial_two, dial_three, dial_four)\r\n//   geometry = new THREE.IcosahedronGeometry(15, 15);\r\n\r\n//   if (dial_one == undefined || dial_two == undefined || dial_three == undefined || dial_four == undefined){\r\n//     dial_one = 0\r\n//     dial_two = 0\r\n//     dial_three = 0\r\n//     dial_four = 0\r\n//     geometry = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.5));\r\n//   } else {\r\n//     geometry = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.1));\r\n//     opacityValue = (-0.85 * dial_one / 127) + 1\r\n//     sizeValue = (-70 * dial_four / 127) + 80\r\n//   }\r\n\r\n//   material = new THREE.TextureLoader().load('/static/src/images/circle.png', (texture) => {\r\n//     particleMaterial = new THREE.PointsMaterial({\r\n//       map: texture,\r\n//       color: color1,\r\n//       blending: THREE.CustomBlending,\r\n//       blendEquation: THREE.AddEquation,\r\n//       blendSrc: THREE.SrcAlphaFactor,\r\n//       blendDst:THREE.OneMinusSrcAlphaFactor,\r\n//       size: sizeValue,\r\n//       depthWrite: false,\r\n//       sizeAttenuation: false,\r\n//       opacity: opacityValue,\r\n//       transparent: true\r\n//   })});\r\n\r\n//   const pointLight = new THREE.PointLight( gradientColor, 1, 100 );\r\n//   group.add(pointLight);\r\n\r\n//   compoCenter = new THREE.Points(geometry, particleMaterial);\r\n//   compoCenter.position.set(15*(pitchOne-48)/4 - 55, 13*(pitchOne-48)/6 - 35, -10);\r\n\r\n//   group.add( compoCenter );\r\n\r\n//   addGeometryAgain();\r\n\r\n// }\r\n\r\n// function addGeometryAgain(){\r\n//   if (polyPitchArray.length != 0){\r\n//     pitchOne = returnPitchOne(polyPitchArray)\r\n//     pitchTwo = returnPitchTwo(polyPitchArray)\r\n//     pitchThree = returnPitchThree(polyPitchArray)\r\n//     color1 = colorByPitch(pitchOne);\r\n//     color2 = colorByPitch(pitchTwo);\r\n//     color3 = colorByPitch(pitchThree)\r\n//   } else {\r\n//     color1 = '#FFFFFF'\r\n//     color2 = '#FFFFFF'\r\n//     color3 = '#FFFFFF'\r\n//   }\r\n\r\n//   // 2개 화음\r\n//   if (polyPitchArray.length == 2){\r\n//     // 첫번째\r\n//       if (dial_one == undefined || dial_two == undefined || dial_three == undefined || dial_four == undefined){\r\n//         dial_one = 0\r\n//         dial_two = 0\r\n//         dial_three = 0\r\n//         dial_four = 0\r\n//         geometry = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.5));\r\n//       } else {\r\n//         geometry = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.1));\r\n//         opacityValue = (-0.85 * dial_one / 127) + 1\r\n//         sizeValue = (-70 * dial_four / 127) + 80\r\n//       }\r\n\r\n//     material = new THREE.TextureLoader().load('/static/src/images/circle.png', (texture) => {\r\n//       particleMaterial = new THREE.PointsMaterial({\r\n//         map: texture,\r\n//         color: color1,\r\n//         blending: THREE.CustomBlending,\r\n//         blendEquation: THREE.AddEquation,\r\n//         blendSrc: THREE.SrcAlphaFactor,\r\n//         blendDst:THREE.OneMinusSrcAlphaFactor,\r\n//         size: sizeValue,\r\n//         depthWrite: false,\r\n//         sizeAttenuation: false,\r\n//         opacity: opacityValue,\r\n//         transparent: true\r\n//     })});\r\n\r\n//     const pointLight = new THREE.PointLight( gradientColor, 1, 100 );\r\n//     group.add(pointLight);\r\n\r\n//     // 두번째\r\n//     if (dial_one == undefined || dial_two == undefined || dial_three == undefined || dial_four == undefined){\r\n//       dial_one = 0\r\n//       dial_two = 0\r\n//       dial_three = 0\r\n//       dial_four = 0\r\n//       geometry2 = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.5));\r\n//     } else {\r\n//       geometry2 = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.1));\r\n//       opacityValue = (-0.85 * dial_one / 127) + 1\r\n//       sizeValue = (-70 * dial_four / 127) + 80\r\n//     }\r\n\r\n//       material2 = new THREE.TextureLoader().load('/static/src/images/circle.png', (texture) => {\r\n//         particleMaterial2 = new THREE.PointsMaterial({\r\n//           map: texture,\r\n//           color: color2,\r\n//           blending: THREE.CustomBlending,\r\n//           blendEquation: THREE.AddEquation,\r\n//           blendSrc: THREE.SrcAlphaFactor,\r\n//           blendDst:THREE.OneMinusSrcAlphaFactor,\r\n//           size: sizeValue,\r\n//           depthWrite: false,\r\n//           sizeAttenuation: false,\r\n//           opacity: opacityValue,\r\n//           transparent: true\r\n//       })});\r\n\r\n//       compoCenter2 = new THREE.Points(geometry2, particleMaterial2);\r\n//       compoCenter2.position.set(15*(pitchTwo-48)/4 - 55, 13*(pitchTwo-48)/6 - 35, -10);\r\n\r\n//       group.add( compoCenter2 )\r\n\r\n//   }\r\n\r\n//   // 3개 화음\r\n//   if (polyPitchArray.length == 3){\r\n//     // 첫번째\r\n//       if (dial_one == undefined || dial_two == undefined || dial_three == undefined || dial_four == undefined){\r\n//         dial_one = 0\r\n//         dial_two = 0\r\n//         dial_three = 0\r\n//         dial_four = 0\r\n//         geometry = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.5));\r\n//       } else {\r\n//         geometry = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.1));\r\n//         opacityValue = (-0.85 * dial_one / 127) + 1\r\n//         sizeValue = (-70 * dial_four / 127) + 80\r\n//       }\r\n\r\n//     material = new THREE.TextureLoader().load('/static/src/images/circle.png', (texture) => {\r\n//       particleMaterial = new THREE.PointsMaterial({\r\n//         map: texture,\r\n//         color: color1,\r\n//         blending: THREE.CustomBlending,\r\n//         blendEquation: THREE.AddEquation,\r\n//         blendSrc: THREE.SrcAlphaFactor,\r\n//         blendDst:THREE.OneMinusSrcAlphaFactor,\r\n//         size: sizeValue,\r\n//         depthWrite: false,\r\n//         sizeAttenuation: false,\r\n//         opacity: opacityValue,\r\n//         transparent: true\r\n//     })});\r\n\r\n//     const pointLight = new THREE.PointLight( gradientColor, 1, 100 );\r\n//     group.add(pointLight);\r\n\r\n//     // 두번째\r\n//     if (dial_one == undefined || dial_two == undefined || dial_three == undefined || dial_four == undefined){\r\n//       dial_one = 0\r\n//       dial_two = 0\r\n//       dial_three = 0\r\n//       dial_four = 0\r\n//       geometry2 = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.5));\r\n//     } else {\r\n//       geometry2 = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.1));\r\n//       opacityValue = (-0.85 * dial_one / 127) + 1\r\n//       sizeValue = (-70 * dial_four / 127) + 80\r\n//     }\r\n\r\n//       material2 = new THREE.TextureLoader().load('/static/src/images/circle.png', (texture) => {\r\n//         particleMaterial2 = new THREE.PointsMaterial({\r\n//           map: texture,\r\n//           color: color2,\r\n//           blending: THREE.CustomBlending,\r\n//           blendEquation: THREE.AddEquation,\r\n//           blendSrc: THREE.SrcAlphaFactor,\r\n//           blendDst:THREE.OneMinusSrcAlphaFactor,\r\n//           size: sizeValue,\r\n//           depthWrite: false,\r\n//           sizeAttenuation: false,\r\n//           opacity: opacityValue,\r\n//           transparent: true\r\n//       })});\r\n\r\n//       compoCenter2 = new THREE.Points(geometry2, particleMaterial2);\r\n//       compoCenter2.position.set(15*(pitchTwo-48)/4 - 55, 13*(pitchTwo-48)/6 - 35, -10);\r\n\r\n//       group.add( compoCenter2 );\r\n\r\n//     // 세번째\r\n//     if (dial_one == undefined || dial_two == undefined || dial_three == undefined || dial_four == undefined){\r\n//       dial_one = 0\r\n//       dial_two = 0\r\n//       dial_three = 0\r\n//       dial_four = 0\r\n//       geometry3 = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.5));\r\n//     } else {\r\n//       geometry3 = new THREE.IcosahedronGeometry(0.5 * dial_two, Math.ceil(dial_three*0.1));\r\n//       opacityValue = (-0.85 * dial_one / 127) + 1\r\n//       sizeValue = (-70 * dial_four / 127) + 80\r\n//     }\r\n\r\n//       material3 = new THREE.TextureLoader().load('/static/src/images/circle.png', (texture) => {\r\n//         particleMaterial3 = new THREE.PointsMaterial({\r\n//           map: texture,\r\n//           color: color3,\r\n//           blending: THREE.CustomBlending,\r\n//           blendEquation: THREE.AddEquation,\r\n//           blendSrc: THREE.SrcAlphaFactor,\r\n//           blendDst:THREE.OneMinusSrcAlphaFactor,\r\n//           size: sizeValue,\r\n//           depthWrite: false,\r\n//           sizeAttenuation: false,\r\n//           opacity: opacityValue,\r\n//           transparent: true\r\n//       })});\r\n\r\n//       compoCenter3 = new THREE.Points(geometry3, particleMaterial3);\r\n//       compoCenter3.position.set(15*(pitchThree-48)/4 - 55, 13*(pitchThree-48)/6 - 35, -10);\r\n\r\n//       group.add( compoCenter3 );\r\n\r\n//   }\r\n// }\r\n\r\n// //-------------------------신디 관련 컨트롤용 코드입니다.-----------------------------//\r\n// let polyPitchArray = [] // 현재 입력으로 사용되고 있는 Note들의 Array\r\n// let polyBeatArray = []\r\n\r\n// SyntheysizerEvents.addEventListener('noteInput', function (e){\r\n//   energy = e.detail.value * 10 / 127\r\n//   pitch = e.detail.pitch; // 48~72\r\n\r\n//   if (!polyPitchArray.includes(pitch)) {\r\n//     polyPitchArray.push(pitch);\r\n//     if(polyPitchArray.length > 3){\r\n//       polyPitchArray = polyPitchArray.slice(-3);\r\n//     }\r\n//   }\r\n\r\n//   compoCenter.position.set(10, 0, 0);\r\n// })\r\n\r\n// SyntheysizerEvents.addEventListener('noteRelease', function (e){\r\n//   polyPitchArray = polyPitchArray.filter((item) => item !== e.detail.pitch);\r\n// })\r\n\r\n// SyntheysizerEvents.addEventListener('padInput', function (e){\r\n//   //console.log(\"In Circle Pad id: \", e.detail.id); //그냥 패드 id입니다. 0~7로 8개가 표시됩니다.\r\n//   if (!polyBeatArray.includes(e.detail.id)) {\r\n//     polyBeatArray.push(e.detail.id);\r\n//   }\r\n// })\r\n\r\n// SyntheysizerEvents.addEventListener('padOutput', function (e){\r\n//   //console.log(\"In Circle Pad id: \", e.detail.id); //그냥 패드 id입니다. 0~7로 8개가 표시됩니다.\r\n//   polyBeatArray = polyBeatArray.filter((item) => item !== e.detail.id);\r\n// })\r\n\r\n// SyntheysizerEvents.addEventListener('dialInput', function (e){\r\n//   dial_one = e.detail.value[0][0]\r\n//   dial_two = e.detail.value[0][1]\r\n//   dial_three = e.detail.value[0][2]\r\n//   dial_four = e.detail.value[0][3]\r\n//   dial_five = e.detail.value[1][0]\r\n//   dial_six = e.detail.value[1][1]\r\n//   dial_seven = e.detail.value[1][2]\r\n//   dial_eight = e.detail.value[1][3]\r\n\r\n//   $(\"#volume\").slider(\"value\", (e.detail.value[0][0]/127)*100); //여기 다이얼 값 범위가 0~127입니다.\r\n// })\r\n\r\n// SyntheysizerEvents.addEventListener('joystickInpnut', function (e){ // 조이스틱을 움직이면 업데이트되는 값입니다.\r\n//   //console.log(\"In Circle Pjoystic: \", e.detail.value); //출력은 [x, y] 형태이며, x는 -64 ~ +64. Y는 0 ~ +64 범위를 가집니다.\r\n//   //console.log(compoCenter.position.set(100, 1, 1))\r\n\r\n// })\r\n\r\n// function beatBGChanger(){\r\n//     scene.background = new THREE.Color('white');\r\n\r\n// }\r\n\r\n// // function changeBlack(){\r\n// //   scene.background = new THREE.Color('black');\r\n// // }\r\n\r\n// function animate() {\r\n//     requestAnimationFrame(animate);\r\n//     // 여기를 기점으로 색깔 등 요소 변경을 추가하면됨\r\n//     FrameRate = FrameRate + 1\r\n\r\n//     if (FrameRate % 4 == 0){\r\n//           deleteBasics();\r\n//           createShape();\r\n\r\n//           if (polyPitchArray.length == 0){\r\n//             deleteBasics();\r\n\r\n//           } else {\r\n\r\n//           }\r\n\r\n//           if (polyBeatArray[0] == 0){\r\n//             renderer.setClearColor('#212121', 0.9);\r\n//           } else if (polyBeatArray[0] == 1) {\r\n//             renderer.setClearColor('#212121', 0.75);\r\n//           } else if (polyBeatArray[0] == 2) {\r\n//             renderer.setClearColor('#212121', 0.45);\r\n//           } else if (polyBeatArray[0] == 3) {\r\n//             renderer.setClearColor('#212121', 0.22);\r\n//           } else {\r\n//             renderer.setClearColor('#212121', 0);\r\n\r\n//           }\r\n\r\n//           render();\r\n//         }\r\n\r\n// }\r\n\r\n// function deleteBasics(){\r\n//     scene.remove(group)\r\n//     group = new THREE.Group();\r\n//     scene.add(group);\r\n\r\n// };\r\n\r\n// // render function\r\n// function render() {\r\n//       controls.update();\r\n//       renderer.render(scene, camera);\r\n//   }\r\n\r\n// // BASIC EVENTS\r\n// init();\r\n// animate();\r\n\r\n// export { pitchInfo, scene }\r\n\n\n//# sourceURL=webpack://Synthesizer/./src/js/circle.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/circle.js"]();
/******/ 	
/******/ })()
;